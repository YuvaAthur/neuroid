// $Id$
/**
 * For running the network a number of times (say 100) to get
 * statistically significant performance results.
 */

testTolerance() {
    void run() {
	startTime = System.currentTimeMillis();

	for (timeConstantM = fromTimeConstantM;
	     timeConstantM < toTimeConstantM;
	     timeConstantM += (toTimeConstantM - fromTimeConstantM) / dataPoints ) {

	    meanQc = 0; minQc = Double.MAX_VALUE; maxQc = Double.MIN_VALUE;
	    meanQs = 0; minQs = Double.MAX_VALUE; maxQs = Double.MIN_VALUE;

	    for (numberOfTrials = 0; numberOfTrials < maxTrials; numberOfTrials++) {
		runOnce(numberOfObjects, numberOfMedialAreas, timeConstantM, Double.NaN);
		meanQc += qc;
		meanQs += qs;
		minQc = Math.min(minQc, qc);
		minQs = Math.min(minQs, qs);
		maxQc = Math.max(maxQc, qc);
		maxQs = Math.max(maxQs, qs);
	    }
	    meanQc /= maxTrials;
	    meanQs /= maxTrials;

	    correctProfile.put(new Double(timeConstantM), new ErrorValue(meanQc, minQc, maxQc));
	    spuriousProfile.put(new Double(timeConstantM), new ErrorValue(meanQs, minQs, maxQs));
     
	} // end of for 

	print("Elapsed experiment time: " +
	      ((double)System.currentTimeMillis() - startTime)/60000 + " mins");

	save(super, idString + ".data");
    }


    //datas = new Vector(combinedProfilePlot(correctProfile, spuriousProfile, idString));

    // Called by combinedProfilePlot
    void createPlot(java.util.List datas) {

	data = new Grapher.VerticalBar(nsh.grapher, "Calculated \\tau_m",
				       calcTimeConstantM, new Range(0, 1));
	datas.add(data);

	datasPlot(datas, idString, 
		  "Membrane Time Constant \\tau_m", "Quality",
		  "Performance with " + numberOfMedialAreas + " Layers over " +
		  maxTrials + " Trials, " + numberOfObjects + " Objects");
    }


    // Save me, save you
    nsh.tolerance = this;

    setAccessibility(true);

    correctProfile = new Profile();
    spuriousProfile = new Profile();

    maxTrials = 2; //10;
    numberOfMedialAreas = 2;
    numberOfObjects = 5;
    timeConstantS = 7;
    delay = 3;

    //segregation = timeConstantS + 2*timeConstantM + delay;

    calcTimeConstantM = (numberOfMedialAreas/* + 1*/) * timeConstantS;

    fromTimeConstantM = calcTimeConstantM - 2 * timeConstantS;
    toTimeConstantM = 2 * calcTimeConstantM;

    dataPoints = 2; //10;

    idString =
	"tolerance-" + fromTimeConstantM + "to" + toTimeConstantM + "-"
	+ maxTrials + "trials-" /* + segregation + "phi-" + timeConstantM + "taum-" */
	+ numberOfObjects + "objects-" + numberOfMedialAreas + "layers";

}
