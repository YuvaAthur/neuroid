// $Id$
/**
 * Test for checking what is the best tolerance measure to be
 * employed. Only one object needs to be present for tests, so that we
 * don't have problems with segregation.  For running the network a
 * number of times (say 10) to get statistically significant
 * performance results.
 */

testTolerance() {
    void run() {
	init();

	startTime = System.currentTimeMillis();

	for (super.timeConstantM = fromTimeConstantM;
	     super.timeConstantM < toTimeConstantM;
	     super.timeConstantM += (toTimeConstantM - fromTimeConstantM) / dataPoints ) {

	    // Calculated according to timeConstantM
	    super.segregation = getSegregation(super);
	    super.threshold = 1.5 * getMaxEPSP(super);

	    meanQc = 0; minQc = Double.MAX_VALUE; maxQc = Double.MIN_VALUE;
	    meanQs = 0; minQs = Double.MAX_VALUE; maxQs = Double.MIN_VALUE;

	    for (numberOfTrials = 0; numberOfTrials < maxTrials; numberOfTrials++) {
		runOnce(super);
		meanQc += qc;
		meanQs += qs;
		minQc = Math.min(minQc, qc);
		minQs = Math.min(minQs, qs);
		maxQc = Math.max(maxQc, qc);
		maxQs = Math.max(maxQs, qs);
	    }
	    meanQc /= maxTrials;
	    meanQs /= maxTrials;

	    correctProfile.put(new Double(timeConstantM), new ErrorValue(meanQc, minQc, maxQc));
	    spuriousProfile.put(new Double(timeConstantM), new ErrorValue(meanQs, minQs, maxQs));
     
	} // end of for 

	print("Elapsed experiment time: " +
	      ((double)System.currentTimeMillis() - startTime)/60000 + " mins");

	save(super, idString + ".data");
    }


    //datas = new Vector(combinedProfilePlot(correctProfile, spuriousProfile, idString));

    // Called by combinedProfilePlot
    void createPlot(java.util.List datas) {

	data = new Grapher.VerticalBar(nsh.grapher, "Calculated \\tau_m",
				       calcTimeConstantM, new Range(0, 1));
	datas.add(data);

	datasPlot(datas, idString, 
		  "Membrane Time Constant \\tau_m", "Quality",
		  "Performance with " + numberOfMedialAreas + " Layers over " +
		  maxTrials + " Trials, " + numberOfObjects + " Object(s)");
    }

    void batch() {
	startTime = System.currentTimeMillis();

	for (int i = 0; i < 3; i++) {
	    super.numberOfMedialAreas = 2 + i;
	    super.maxTrials = 10;
	    run();
	}

	print("Total experiment time: " +
	      (System.currentTimeMillis() - startTime)/60000 + " mins");
    }

    void init() {
	super.correctProfile = new Profile();
	super.spuriousProfile = new Profile();

	super.gamma = (numberOfMedialAreas - 1) * timeConstantS;
	super.calcTimeConstantM = getTimeConstantM(super);

	super.fromTimeConstantM = calcTimeConstantM - timeConstantS;
	super.toTimeConstantM = 2 * calcTimeConstantM;

	super.idString =
	    "tolerance-" + fromTimeConstantM + "to" + toTimeConstantM + "-"
	    + maxTrials + "trials-" + numberOfObjects + "objects-"
	    + numberOfMedialAreas + "layers";
    }


    // Save me, save you
    nsh.tolerance = this;

    setAccessibility(true);

    // Properties
    maxTrials = 2; //10;
    numberOfMedialAreas = 2;
    numberOfObjects = 1;  // so that we can check tolerance independent of segregation.
    timeConstantS = 7;
    delay = 3;
    dataPoints = 10;

    //segregation = timeConstantS + 2*timeConstantM + delay;


}
