import edu.ull.cgunay.plots.*;
import edu.ull.cgunay.utils.*;
import neuroidnet.ntr.*;

// The neuroinet shell namespace
nsh = object();

print(	"NeuroidNetShell by Cengiz Gunay running on BeanShell\n"); 

start() { global.source("start.bsh"); }
//stats() { global.source("stats.bsh"); }
//testCapacity() { global.source("testCapacity.bsh"); }
//testTolerance() { global.source("testTolerance.bsh"); }
//testSegregation() { global.source("testSegregation.bsh"); }
post() { global.source("postExplore.bsh"); }
watcheds() { global.source("watcheds.bsh"); }
prof() { global.network = load("net.withprofile.data"); watcheds(); }
spike(n) { global.n = n; global.source("spike.bsh"); }
wplot(n,s) { global.n = n; global.s = s; global.source("wplot.bsh"); }
synActs(n) { global.n = n; global.source("synActs.bsh"); }
gnuplot() { global.grapher = new GNUPlot(); }
matlab() { nsh.grapher = new MatLab(); }
display(plot) { return grapher.display(plot, null); }
obsyn() { global.source("obsyn.bsh"); }
getNeuroid(s,i) { return network.getNeuroid(s,i); }
getNeuroid(n) { return network.getNeuroid(n); }
chain() { global.source("chain.bsh"); }
printProfile(p) {
  Task t = new Task() {
    void job(Object o) {
      e = (Map.Entry)o;
      print(e.getKey() + "=" + ((Expressive)e.getValue()).getStatus());
}};
  UninterruptedIteration.loop(p.collection(null), t);
}

// some more functions
source("preamble.bsh");
source("stats.bsh");
source("testCapacity.bsh");
source("testTolerance.bsh");
source("testSegregation.bsh");

// Initialize the tests
testCapacity();
testTolerance();
testSegregation();

print("\nAvailable methods: " + this.methods);
source("/dev/null"); // To bring the source command into namespace
