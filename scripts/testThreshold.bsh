// $Id$
/**
 * Tests network performance by changing the threshold parameter
 * between the given theoretical limits. The network is run a number
 * of times (say 10) to get statistically significant results.
 */

testThreshold() {
    void run() {
	init();

	startTime = System.currentTimeMillis();

	for (count = 0; count < dataPoints; count++) {
	    super.threshold = maxEPSP + ((double)count) * maxEPSP / dataPoints; 

	    runTrials(super, super.threshold);
	} // end of for (nuBoost = 1; nuBoost < 5; nuBoost++)

	print("Elapsed experiment time: " +
	      ((double)System.currentTimeMillis() - startTime)/60000 +
	      " mins");

	save(super, idString + ".data");
    }

    //datas = new Vector(combinedProfilePlot(correctProfile, spuriousProfile, idString));

    // Called by combinedProfilePlot
    void createPlot(java.util.List datas) {

	data = new Grapher.VerticalBar(nsh.grapher, "Empirical threshold",
				       calcThreshold, new Range(0, 1));
	datas.add(data);

	datasPlot(datas, idString, "Threshold T", "Quality",
		  "Performance with " + numberOfMedialAreas + " Layers, " +
		  numberOfObjects + " Object(s) over " +
		  maxTrials + " Trials, \\epsilon_{max} = " + maxEPSP);

    }

    // Runs everything
    void runAll() {
	run();
	combinedProfilePlot(super);
    }

    void batch() {
	startTime = System.currentTimeMillis();

	for (int i = 0; i < 3; i++) {
	    super.numberOfMedialAreas = 2 + i;
	    super.maxTrials = 10;
	    run();
	}

	print("Total experiment time: " +
	      (System.currentTimeMillis() - startTime)/60000 + " mins");
    }

    void init() {
	super.correctProfile = new Profile();
	super.spuriousProfile = new Profile();
	super.correctRatioProfile = new Profile();

	super.gamma = (numberOfMedialAreas - 1) * timeConstantS;
	super.timeConstantM = getTimeConstantM(super);
	super.segregation = getSegregation(super);

	super.maxEPSP = getMaxEPSP(super);
	super.fromThreshold = maxEPSP;
	super.toThreshold = 2 * maxEPSP;
	super.calcThreshold = 1.5 * super.maxEPSP;

	super.idString =
	    "threshold-" + fromThreshold + "to" + toThreshold + "-"
	    + maxTrials + "trials-" + numberOfObjects + "objects-" +
	    //segregation + "phi-" + timeConstantM + "taum-" 
	    + numberOfMedialAreas + "layers-" + maxEPSP + "epsilon";

    }

    // Save me, save you
    nsh.threshold = this;

    setAccessibility(true);

    maxTrials = 2; //10
    numberOfMedialAreas = 2;
    numberOfObjects = 1;
    timeConstantS = 7;
    delay = 3;

    dataPoints = 7;



}
