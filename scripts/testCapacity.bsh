// $Id$
/**
 * For running the network a number of times (say 100) to get
 * statistically significant performance results.
 */


testCapacity() {
    void run() {
	init();

	startTime = System.currentTimeMillis();

	for (numberOfObjects = fromObjects; numberOfObjects < toObjects; numberOfObjects+=3) {

	    meanQc = 0; minQc = Double.MAX_VALUE; maxQc = Double.MIN_VALUE;
	    meanQs = 0; minQs = Double.MAX_VALUE; maxQs = Double.MIN_VALUE;

	    for (numberOfTrials = 0; numberOfTrials < maxTrials; numberOfTrials++) {
		runOnce(numberOfObjects, numberOfMedialAreas, timeConstantM, Double.NaN);
		meanQc += qc;
		meanQs += qs;
		minQc = Math.min(minQc, qc);
		minQs = Math.min(minQs, qs);
		maxQc = Math.max(maxQc, qc);
		maxQs = Math.max(maxQs, qs);
	    }
	    meanQc /= maxTrials;
	    meanQs /= maxTrials;

	    correctProfile.put(new Double(numberOfObjects), new ErrorValue(meanQc, minQc, maxQc));
	    spuriousProfile.put(new Double(numberOfObjects), new ErrorValue(meanQs, minQs, maxQs));
     
	} // end of for (numberOfObjects = 1; numberOfObjects < 5; numberOfObjects++)

	print("Elapsed experiment time: " +
	      ((double)System.currentTimeMillis() - startTime)/60000 +
	      " mins");

	save(super, idString + ".data");
    }

    //datas = new Vector(combinedProfilePlot(correctProfile, spuriousProfile, idString));

    // Called by combinedProfilePlot
    void createPlot(java.util.List datas) {

	data = new Grapher.VerticalBar(nsh.grapher, "Predicted capacity",
				       calcObjects, new Range(0, 1));
	datas.add(data);

	datasPlot(datas, idString, "Number of Objects", "Quality",
		  "Performance with " + numberOfMedialAreas + " Layers over " +
		  maxTrials + " Trials,  \\tau_m = " + timeConstantM);

    }

    // Runs everything
    void runAll() {
	run();
	combinedProfilePlot(super);
    }

    void batch() {
	startTime = System.currentTimeMillis();

	for (int i = 0; i < 3; i++) {
	    super.numberOfMedialAreas = 2 + i;
	    super.maxTrials = 10;
	    run();
	}

	print("Total experiment time: " +
	      (System.currentTimeMillis() - startTime)/60000 + " mins");
    }

    void init() {
	super.correctProfile = new Profile();
	super.spuriousProfile = new Profile();

	super.timeConstantM = (numberOfMedialAreas)*timeConstantS;
	super.segregation = timeConstantS + 2*timeConstantM + delay;

	super.idString =
	    "capacity-" + fromObjects + "to" + toObjects + "-"
	    + maxTrials + "trials-" + segregation + "phi-" + timeConstantM + "taum-" 
	    + numberOfMedialAreas + "layers";

    }

    // Save me, save you
    nsh.capacity = this;

    setAccessibility(true);

    maxTrials = 2; //10
    numberOfMedialAreas = 2;
    timeConstantS = 7;
    delay = 3;

    fromObjects = 1;
    toObjects = 20;

    calcObjects = 10;


}
