// $Id$
/**
 * For running the network a number of times (say 100) to get
 * statistically significant performance results.
 */

void runOnce(int numberOfObjects, int numberOfMedialAreas,
	     double timeConstantM, double segregation) {
    network = new neuroidnet.phasesegregator.Network(false);
    network.numberOfMedialAreas = numberOfMedialAreas; 

    //print("\tau_m = " + network.timeConstantM);
    if (!new Double(timeConstantM).isNaN())
	network.timeConstantM = timeConstantM; 
    if (!new Double(segregation).isNaN())
	network.segregation = segregation; 
    //print("\tau_m = " + network.timeConstantM);

    network.run();
    peripheral = new neuroidnet.phasesegregator.StatisticalInputSequence(network);
    peripheral.numberOfObjects = numberOfObjects;
    peripheral.build();

    //save(network, "net.data");

    // do an exploratory run
    network.advanceTime(peripheral.numberOfObjects * (network.segregation + 1));
    print (network.getProperties());

    peripheral.evaluateResults();
    this.caller.cc = peripheral.correctConcepts();
    this.caller.qc = peripheral.qualityOfConcepts(this.caller.cc);
    print(this.caller.cc.size() + " correct concept quality = " + this.caller.qc);

    this.caller.sc = peripheral.spuriousConcepts();
    //print(sc);
    this.caller.qs = peripheral.qualityOfConcepts(this.caller.sc);
    print(this.caller.sc.size() + " spurious concepts, quality = " + this.caller.qs);

    network.stop();		// Release threads
}

// OBSOLETE!!
void saveProfiles(testObject) {
    print("correct concept qualities = " + testObject.correctProfile);
    print("spurious concept quality = " + testObject.spuriousProfile);

    save(testObject.correctProfile, "profile-correct-" + testObject.idString + ".data");
    save(testObject.spuriousProfile, "profile-spurious-" + testObject.idString + ".data");
}

// Profile correctProfile, Profile spuriousProfile, idString

void datasPlot(java.util.List datas, String idString, String xLabel, String yLabel, String title) {
    print("datas: " + datas);

    nsh.plot = object();
    nsh.plot.p = new SuperposedDataPlot(null, datas);
    nsh.plot.p.setTitle(title);
    nsh.plot.p.setXLabel(xLabel);
    nsh.plot.p.setYLabel(yLabel);

    nsh.plot.h = nsh.grapher.display(nsh.plot.p, null);
    nsh.plot.h.writeEPS("plot-" + idString + ".eps");
}


void combinedProfilePlot(testObject) {
    
    // do not start grapher
    if (nsh.grapher == null || nsh.grapher == void) {
	print("Grapher not found, gracefully exiting... Use matlab(), etc.");
	return;
	//matlab();
    }

    correctData =
	new Grapher.ErrorData(nsh.grapher, "Correct concepts", testObject.correctProfile);
    spuriousData =
	new Grapher.ErrorData(nsh.grapher, "Spurious concepts", testObject.spuriousProfile);

    Grapher.Data[] datas = {correctData, spuriousData};

    testObject.createPlot(new Vector(Arrays.asList(datas)));
}

void initProfile(list) {
    task = new Task() {
	    void job(Object variable) {
		String[] allP = { "min", "max", "mean"};
		task = new Task() {
			void job(Object o) {
			    eval("global." + o + variable + "Profile = new Profile();");
			}
		    };
		UninterruptedIteration.loop(allP, task);
	    }
	};
    UninterruptedIteration.loop(list, task);
}
