// $Id$
/**
 * For running the network a number of times (say 100) to get
 * statistically significant performance results.
 */

void runOnce(testObject) {
    // TODO: should it be testObject.network?
    testObject.network = new neuroidnet.phasesegregator.Network(false);
    testObject.network.numberOfMedialAreas = testObject.numberOfMedialAreas; 

    //print("\tau_m = " + testObject.network.timeConstantM);
    if (!new Double(testObject.timeConstantM).isNaN())
	testObject.network.timeConstantM = testObject.timeConstantM; 
    if (!new Double(testObject.segregation).isNaN())
	testObject.network.segregation = testObject.segregation; 
    if (testObject.threshold != void && testObject.threshold != null)
	testObject.network.threshold = testObject.threshold;
    print("threshold = " + testObject.network.threshold + ", " + testObject.threshold);

    if (testObject.nuBoost != void && testObject.nuBoost != null)
	testObject.network.nuBoost = testObject.nuBoost;
    print("nuBoost = " + testObject.network.nuBoost + ", " + testObject.nuBoost);

    testObject.network.run();
    testObject.peripheral =
	new neuroidnet.phasesegregator.StatisticalInputSequence(testObject.network);
    testObject.peripheral.numberOfObjects = testObject.numberOfObjects;
    testObject.peripheral.build();

    if (testObject.saveNetwork != void && testObject.saveNetwork) 
	save(testObject.network, "net.data");

    resumeRun(testObject);
}

// Loads initialized network from file and runs it
void rerun(testObject) {
    print("Loading saved network...");
    testObject.network = load("net.data");

    testObject.peripheral = testObject.network.getPeripheral();
 
    // Set the watches this time
    print("Set watches...");
    testObject.network.addWatchAll(testObject.watchedSet);

    print("Running...");
    resumeRun(testObject);

    print("Watcheds...");
    watcheds(testObject);
}

// runs the current network for the required amount of time
void resumeRun(testObject) {
    // run for all objects plus initial onset (we need to wait until they arrive at destination!)
    testObject.network.advanceTime(testObject.numberOfMedialAreas * testObject.delay +
			//testObject.timeConstantS + 
			testObject.peripheral.numberOfObjects * testObject.network.segregation +
			5); // some additional msecs
    print (testObject.network.getProperties());

    testObject.peripheral.evaluateResults();
    this.caller.cc = testObject.peripheral.correctConcepts();
    //this.caller.qc = testObject.peripheral.qualityOfConcepts(this.caller.cc);
    // TODO: Maybe should be:
    this.caller.qc =
	this.caller.cc.size() * testObject.peripheral.qualityOfConcepts(this.caller.cc) /
	testObject.numberOfObjects;

    this.caller.rc = (double) this.caller.cc.size() / testObject.numberOfObjects;

    print(this.caller.cc.size() + " of " + testObject.numberOfObjects +
	  " (" + this.caller.rc + ") correct concept quality = " + this.caller.qc);

    this.caller.sc = testObject.peripheral.spuriousConcepts();
    //print(sc);
    this.caller.qs = testObject.peripheral.qualityOfConcepts(this.caller.sc);
    print(this.caller.sc.size() + " spurious concepts, quality = " + this.caller.qs);

    testObject.network.stop();		// Release threads
}

// OBSOLETE!!
void saveProfiles(testObject) {
    print("correct concept qualities = " + testObject.correctProfile);
    print("spurious concept quality = " + testObject.spuriousProfile);

    save(testObject.correctProfile, "profile-correct-" + testObject.idString + ".data");
    save(testObject.spuriousProfile, "profile-spurious-" + testObject.idString + ".data");
}

// Profile correctProfile, Profile spuriousProfile, idString

void datasPlot(java.util.List datas, String idString, String xLabel, String yLabel, String title) {
    print("datas: " + datas);

    nsh.plot = object();
    nsh.plot.p = new SuperposedDataPlot(null, datas);
    nsh.plot.p.setTitle(title);
    nsh.plot.p.setXLabel(xLabel);
    nsh.plot.p.setYLabel(yLabel);
    nsh.plot.p.setFontSize(12);

    nsh.plot.h = nsh.grapher.display(nsh.plot.p, null);
    nsh.plot.h.writeEPSbw("plot-" + idString + ".eps");
}


void combinedProfilePlot(testObject) {
    
    // do not start grapher
    if (nsh.grapher == null || nsh.grapher == void) {
	print("Grapher not found, gracefully exiting... Use matlab(), etc.");
	return;
	//matlab();
    }

    correctData =
	new Grapher.ErrorData(nsh.grapher, "Correct concepts", testObject.correctProfile);
    spuriousData =
	new Grapher.ErrorData(nsh.grapher, "Spurious concepts", testObject.spuriousProfile);
    //correctRatioData =
    // new Grapher.ErrorData(nsh.grapher, "Recruited ratio", testObject.correctRatioProfile);

    Grapher.Data[] datas = {correctData, spuriousData}; // removed: correctRatioData (see above)

    testObject.createPlot(new Vector(Arrays.asList(datas)));
}

double getTimeConstantM(testObject) {
    return testObject.gamma + testObject.timeConstantS;
}

double getSegregation(testObject) {
    return testObject.gamma + 2 * testObject.timeConstantM;
}

double getMaxEPSP(testObject) {
    return Math.exp((double)-testObject.timeConstantS *
		    Math.log((double)testObject.timeConstantS / testObject.timeConstantM) /
		    (testObject.timeConstantS - testObject.timeConstantM));
}

void runTrials(testObject, double param) {
    meanQc = 0; minQc = Double.MAX_VALUE; maxQc = Double.MIN_VALUE;
    meanQs = 0; minQs = Double.MAX_VALUE; maxQs = Double.MIN_VALUE;
    meanRc = 0; minRc = Double.MAX_VALUE; maxRc = Double.MIN_VALUE;

    for (numberOfTrials = 0; numberOfTrials < testObject.maxTrials; numberOfTrials++) {
	runOnce(testObject);
	meanQc += qc;
	meanQs += qs;
	meanRc += rc;
	minQc = Math.min(minQc, qc);
	minQs = Math.min(minQs, qs);
	minRc = Math.min(minRc, rc);
	maxQc = Math.max(maxQc, qc);
	maxQs = Math.max(maxQs, qs);
	maxRc = Math.max(maxRc, rc);
    }
    meanQc /= testObject.maxTrials;
    meanQs /= testObject.maxTrials;
    meanRc /= testObject.maxTrials;

    testObject.correctProfile.put(new Double(param),
				  new ErrorValue(meanQc, minQc, maxQc));
    testObject.spuriousProfile.put(new Double(param),
				   new ErrorValue(meanQs, minQs, maxQs));
    testObject.correctRatioProfile.put(new Double(param),
				       new ErrorValue(meanRc, minRc, maxRc));

}

void initProfile(list) {
    task = new Task() {
	    void job(Object variable) {
		String[] allP = { "min", "max", "mean"};
		task = new Task() {
			void job(Object o) {
			    eval("global." + o + variable + "Profile = new Profile();");
			}
		    };
		UninterruptedIteration.loop(allP, task);
	    }
	};
    UninterruptedIteration.loop(list, task);
}

void watcheds(testObject) {
    Task t = new Task() {
	    int count = 0;
	    void job(Object o) {
		Neuroid n = testObject.network.getNeuroid((NeuroidName)o);
		eval("testObject.n" + ++super.count +
		     " = n;");
		//eval("print(super + \": \" + super.variables);");
		print ("n" + super.count + "-> " + n.getProperties());
	    }
	};

    UninterruptedIteration.loop(testObject.watchedSet, t);
}
