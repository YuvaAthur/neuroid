// $Id$
/**
 * For running the network a number of times (say 100) to get
 * statistically significant performance results.
 */

setAccessibility(true);

source("preamble.bsh");

void runOnce(int numberOfObjects, int numberOfMedialAreas,
	     double timeConstantM, double segregation) {
    network = new neuroidnet.phasesegregator.Network(false);
    network.numberOfMedialAreas = numberOfMedialAreas; 

    //print("\tau_m = " + network.timeConstantM);
    if (!new Double(timeConstantM).isNaN())
	network.timeConstantM = timeConstantM; 
    if (!new Double(segregation).isNaN())
	network.segregation = segregation; 
    //print("\tau_m = " + network.timeConstantM);

    network.run();
    peripheral = new neuroidnet.phasesegregator.StatisticalInputSequence(network);
    peripheral.numberOfObjects = numberOfObjects;
    peripheral.build();

    //save(network, "net.data");

    // do an exploratory run
    network.advanceTime(peripheral.numberOfObjects * (network.segregation + 1));
    print (network.getProperties());

    peripheral.evaluateResults();
    this.caller.cc = peripheral.correctConcepts();
    this.caller.qc = peripheral.qualityOfConcepts(this.caller.cc);
    print(this.caller.cc.size() + " correct concept quality = " + this.caller.qc);

    this.caller.sc = peripheral.spuriousConcepts();
    //print(sc);
    this.caller.qs = peripheral.qualityOfConcepts(this.caller.sc);
    print(this.caller.sc.size() + " spurious concepts, quality = " + this.caller.qs);

    network.stop();		// Release threads
}

void saveProfiles() {
    print("correct concept qualities = " + correctProfile);
    print("spurious concept quality = " + spuriousProfile);

    save(correctProfile, "profile-correct-" + idString + ".data");
    save(spuriousProfile, "profile-spurious-" + idString + ".data");
}

// Profile correctProfile, Profile spuriousProfile, idString
void combinedProfilePlot() {
    
    // do not start grapher
    if (nsh.grapher == null || nsh.grapher == void)
	return;
    //matlab();

    correctData = new Grapher.ErrorData(nsh.grapher, "Correct concepts", correctProfile);
    spuriousData = new Grapher.ErrorData(nsh.grapher, "Spurious concepts", spuriousProfile);

    Grapher.Data[] datas = {correctData, spuriousData};

    // Polymorphism here
    createPlot(Arrays.asList(datas));
}

void datasPlot(java.util.List datas, String idString, String xLabel, String yLabel, String title) {

    this.caller.p = new SuperposedDataPlot(null, datas);
    this.caller.p.setTitle(title);
    this.caller.p.setXLabel(xLabel);
    this.caller.p.setYLabel(yLabel);

    this.caller.h = nsh.grapher.display(this.caller.p, null);
    this.caller.h.writeEPS("plot-" + idString + ".eps");

}

void initProfile(list) {
    task = new Task() {
	    void job(Object variable) {
		String[] allP = { "min", "max", "mean"};
		task = new Task() {
			void job(Object o) {
			    eval("global." + o + variable + "Profile = new Profile();");
			}
		    };
		UninterruptedIteration.loop(allP, task);
	    }
	};
    UninterruptedIteration.loop(list, task);
}
