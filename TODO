- naming:
	- create a NeuroidId class that holds name, id for neuroids.
		Add this to the watchList in Network.
	- make watchList a Set.
	- in bsh: before any loading, extract the watchSet of previous net and add it to the loaded one
	- add an id to Synapse according to place in Neuroid.synapses Vector
	- change all names! neuroid should just mention its number and area name !
- calculate new probabilities and change threshold? (in network.build?)
	- alternatively: make adaptive threshold? (see the new electrical circuit model)
- remove debug switch from neuroid
- move Mode to its own class and make each state a new class. make this algorithm stand in its own package, i.e. UMT
- move neuroinet independent stuff in neuroinet.ntr.plots.* to utils.plots.* out of neuroidnet!
	- document and put them on home page for open use (also iterators move'em out)
	- write package.html, imporve doumentation to include examples
- periphery
	- put concept-area into peripheral object? does it need its step() called?
	+ make a single sensory area 
	+ move Concept related files to periphery
		+ move ConceptArea to periphery package
		+ ArtificialConcept?
		+ ConceptSaturatedException
- throw FoundException in Utils.Task to optimize iterations for search 
- extend the Vectors that holds neuroids, etc. so that they show up in organizational descriptions
	- correct way would've been to use templatized types of vectors which doesn't exist in Java
		they're working on it, see bug on "parameterized types"
- graphs
	+ add the notion of window number to grapher,
		- or better associate each plot with its own window 
	- add canned multiplots, e.g. for neuroid: pot, conf, threshold, etc.
	- add multiplots
		- separate frames, or superimposed with different legends
		- make spike plot more like a plot to use the generalized calls from Grapher
	+ GNUPlot
		- add setOutputFile() method to grapher to send output as (E)PS
	+ put title on matlab graph
		- there's a bug in associating the correct legend
	+ modify to produce gnuplot graphs optionally. 
- make debugger-style simulator
	- make a beanshell script to bootstrap bsh.Console with a `neuroidal' environment
		+ made a ~/.bshrc that sets an Interpreter env which contains funcs and vars
	- enable placement of breakpoints
	- enable setting recursive watches to neuroids at deep layers of the net
 	+ allow watch switches on all objects (corresponding to watching)
		+ every entity should record its activity in a separate object (Profiles)
			+ neuroid saves its fire time, mode: threshold, sugT, confidence
			+ synapse saves its weight, and spike receive time
		+ neuroid, (synapse records info by checking destneuroid)
	+ make a shell read-eval-print loop that drives Base.Network (using BeanShell instead)
	+ that builds the net from another network file but then takes over in simulation()
	+ save the network after build(), use serialization, 
	+ don't save all spikes, just the ones being debugged
	+ allow re-runs (by saving network state in binary with serialization
		(make everything serializable))
-errors:
	- rigid threshold causing problems, need adaptive max taking threshold
	+ spurious concepts, due to infinite weights after ConceptSaturatedException
		+ need better debugging env to tackle these problems [see beanshell]
	+ burst firing, due to primitive refractory effect? [yes] no, infinite weights
	+ sumOfCurrentWeights overflow? [no]
- area name as a concept? or area representing neuroids?
- put step inside Neuroid.Mode?
- really use SRM or forward-euler is sufficient?
	- can we mix SRM and diff eqs? I need adaptive threshold
- fix ConcurrentModificationException by waiting for all threads to finish at the end.
- change naming of sensoryneuroid to 'percept'
- implement tzeng's network: allocate all assemblies in input area and create all UMs then prune connections and count 'em!
- solve problem with constant current
- distributed computation:
	- use AxonArbor for dist communication improvement (event-list protocol).
	- Make a remote interface for it.
	- Synapse implement SynapseInt
	+ make Area implement Remote.AreaInt, etc.
? do something about too many updates to the algorithm 
+ limit recruitment by throwing an exception in Concept.attach
+ make neuroidal web page with links to reports of related projects
+ TreeSet or HashSet?
+ enable selection of inhibitory connections and other parameters
+ set global inhibitory connections
+ implement dumpdata in conceptArea
+ Test new synapse scanning constructs for validity.
+ Enable selection of dynamic behavior of groups of neurons (delay + membrane characteristic).
+ migrate functions into AxonArbor.
+ clean and make a new graph figure in matlab graph
+ remove repeating "Concept:"s from the composite names
+ conceptualize inhibitory neuroids!
+ two ways of textualization (expression): 1- static-long (getStatus), 2- dynamic-short (toString) ?
+ add count of neuroids in a concept to its string value!
+ print network info in Netowrk.toString at end of program
+ id? naming neuroids? decide by area vector position? decide at time of `attach'ing to area?
+ add deltaT to Area and use if in algo.s et al.
+ Visualize somehow
+ Give inputs
+ determine constants and run test
+ Complete period calculation in Neuroid.updateWeights()
+ add refractory period and reset potential!
+ parallelize (RMI)