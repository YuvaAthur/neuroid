- periphery
	+ make a single sensory area 
	- put concept-area into peripheral object? does it need its step() called?
	- move Concept related files to periphery
		- move ConceptArea to periphery package
		- ArtificialConcept?
		- ConceptSaturatedException
- throw FoundException in Utils.Task to optimize iterations for search 
- extend the Vectors that holds neuroids, etc. so that they show up in organizational descriptions
	- correct way would've been to have templatized types of vectors
- graphs
	- put title on matlab graph
	- modify to produce gnuplot graphs optionally. 
- make debugger-style simulator
	- enable placement of breakpoints
 	- allow watch switches on all objects (corresponding to watching)
		- every entity should record its activity in a separate file
		(or just serialize them?)
			- neuroid saves its fire time, mode: threshold, c, d
			- synapse saves its weight, and spike receive time
		+ neuroid, (synapse records info by checking destneuroid)
	+ make a shell read-eval-print loop that drives Base.Network (using BeanShell instead)
	+ that builds the net from another network file but then takes over in simulation()
	+ save the network after build(), use serialization, 
	+ don't save all spikes, just the ones being debugged
	+ allow re-runs (by saving network state in binary with serialization
		(make everything serializable))
-errors:
	- spurious concepts, due to infinite weights
	+ sumOfCurrentWeights overflow?
	- burst firing, due to primitive refractory effect? no, infinite weights
- area name as a concept? or area representing neuroids?
+ limit recruitment by throwing an exception in Concept.attach
- put step inside Neuroid.Mode?
- fix ConcurrentModificationException by waiting for all threads to finish at the end.
+ make neuroidal web page with links to reports of related projects
+ make Area implement Remote.AreaInt, etc.
+ TreeSet or HashSet?
- change naming of sensoryneuroid to 'percept'
- implement tzeng's network: allocate all assemblies in input area and create all UMs then prune connections and count 'em!
- use AxonArbor for dist communication improvement (event-list protocol).
? do something about too many updates to the algorithm
- solve problem with constant current
+ enable selection of inhibitory connections and other parameters
+ set global inhibitory connections
+ implement dumpdata in conceptArea
+ Test new synapse scanning constructs for validity.
+ Enable selection of dynamic behavior of groups of neurons (delay + membrane characteristic).
+ migrate functions into AxonArbor.
+ clean and make a new graph figure in matlab graph
+ remove repeating "Concept:"s from the composite names
+ conceptualize inhibitory neuroids!
+ two ways of textualization (expression): 1- static-long (getStatus), 2- dynamic-short (toString) ?
+ add count of neuroids in a concept to its string value!
+ print network info in Netowrk.toString at end of program
+ id? naming neuroids? decide by area vector position? decide at time of `attach'ing to area?
+ add deltaT to Area and use if in algo.s et al.
+ Visualize somehow
+ Give inputs
+ determine constants and run test
+ Complete period calculation in Neuroid.updateWeights()
+ add refractory period and reset potential!
+ parallelize (RMI)